
public class Bot {
	private List hand;
	
	// bot constructor
	public Bot(){
		hand = new List();
	}
	
	public List getHand(){
		return hand;
	}
	
	public void setHand(List newHand){
		hand = newHand;
	}
	
	// makes a move
	// @param takes a list that is the top most card set thrown down in the pile
	// @return returns nothing
	public void move(List top){
		if (top.length() == 5 && containsFiveCard()){
			
		}
		else if (top.length() == 4 && containsDouble()){
			
		}
		else if (top.length() == 2 && containsSingle()){
			
		}
		else if (top.length() == 1){
			
		}
	}
	
	private boolean containsFiveCard(){
		boolean contains = true;
		if (hand.length() < 5){
			contains = false;
		}
		else if (!containsFullHouse() && !containsFourOfAKind() && !containsStraightFlush() && !containsFlush() && !containsStraight()){
			contains = false;
		}
		return contains;
	}
	
	private boolean containsFullHouse(){
		boolean contains = true;
		if (!containsDouble() && !containsTriple()){
			contains = false;
		}
		return contains;
	}
	
	private boolean containsTriple(){
		return false;
	}
	
	private boolean containsDouble(){
		return false;
	}
	
	private boolean containsSingle(){
		return false;
	}
	
	private boolean isFiveCard(){
		return false;
	}
	
	private boolean isDouble(){
		return false;
	}
	
	private boolean isSingle(){
		return false;
	}
	
	// sort the bot's hand by rank
	// @param takes nothing
	// @return returns nothing
	private void sortRank(){
		List sorted = new List();											// create new list that is to be sorted version of the bot's hand
		hand.moveFront();													// move hand cursor to front
		while (hand.get() != null){											// while the cursor of the hand list is not the front
			if (sorted.length() == 0){										// if the sorted list is empty, append the first item on the hand
				sorted.append(hand.front());
			}
			else {
				sorted.moveFront();
				Card cursorCard = (Card) hand.get();						// convert sorted cursor
				Card sortedCursorCard = (Card) sorted.get();				// convert hand cursor to card
				if (cursorCard.compareToRank(sortedCursorCard) == -1 || cursorCard.compareToRank(sortedCursorCard) == 0){		// if sortedcard rank is greater than or equal to cursorcard rank
					sorted.insertBefore(cursorCard);						// insert cusorcard before sortedcard
				}
				else if (cursorCard.compareToRank(sortedCursorCard) == 1 && sorted.get().equals(sorted.back())){	// if sortedcatd rank is less than cursorcard rank and the sortedcard is the last card in the sorted list
					sorted.append(cursorCard);								// append the cursor card to the sorted list
				}
				else {														// if sorted cursor is less than cursorcard and sortedcard is not the last card in the sorted list
					sorted.moveNext();
				}
			}
			hand.moveNext();
		}
		
		hand = sorted;
	}
}
